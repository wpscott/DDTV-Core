// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: KeepAlive.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AcFunDanmu {

  /// <summary>Holder for reflection information generated from KeepAlive.proto</summary>
  public static partial class KeepAliveReflection {

    #region Descriptor
    /// <summary>File descriptor for KeepAlive.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KeepAliveReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9LZWVwQWxpdmUucHJvdG8SCkFjRnVuRGFubXUaDlJlZ2lzdGVyLnByb3Rv",
            "GhZQdXNoU2VydmljZVRva2VuLnByb3RvGhhBY2Nlc3NQb2ludHNDb25maWcu",
            "cHJvdG8iqwIKEEtlZXBBbGl2ZVJlcXVlc3QSQgoOcHJlc2VuY2VTdGF0dXMY",
            "ASABKA4yKi5BY0Z1bkRhbm11LlJlZ2lzdGVyUmVxdWVzdC5QcmVzZW5jZVN0",
            "YXR1cxJBCg9hcHBBY3RpdmVTdGF0dXMYAiABKA4yKC5BY0Z1bkRhbm11LlJl",
            "Z2lzdGVyUmVxdWVzdC5BY3RpdmVTdGF0dXMSNgoQcHVzaFNlcnZpY2VUb2tl",
            "bhgDIAEoCzIcLkFjRnVuRGFubXUuUHVzaFNlcnZpY2VUb2tlbhI6ChRwdXNo",
            "U2VydmljZVRva2VuTGlzdBgEIAMoCzIcLkFjRnVuRGFubXUuUHVzaFNlcnZp",
            "Y2VUb2tlbhIcChRrZWVwYWxpdmVJbnRlcnZhbFNlYxgFIAEoBSKjAQoRS2Vl",
            "cEFsaXZlUmVzcG9uc2USOgoSYWNjZXNzUG9pbnRzQ29uZmlnGAEgASgLMh4u",
            "QWNGdW5EYW5tdS5BY2Nlc3NQb2ludHNDb25maWcSEgoKc2VydmVyTXNlYxgC",
            "IAEoAxI+ChZhY2Nlc3NQb2ludHNDb25maWdJcHY2GAMgASgLMh4uQWNGdW5E",
            "YW5tdS5BY2Nlc3NQb2ludHNDb25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AcFunDanmu.RegisterReflection.Descriptor, global::AcFunDanmu.PushServiceTokenReflection.Descriptor, global::AcFunDanmu.AccessPointsConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.KeepAliveRequest), global::AcFunDanmu.KeepAliveRequest.Parser, new[]{ "PresenceStatus", "AppActiveStatus", "PushServiceToken", "PushServiceTokenList", "KeepaliveIntervalSec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.KeepAliveResponse), global::AcFunDanmu.KeepAliveResponse.Parser, new[]{ "AccessPointsConfig", "ServerMsec", "AccessPointsConfigIpv6" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class KeepAliveRequest : pb::IMessage<KeepAliveRequest> {
    private static readonly pb::MessageParser<KeepAliveRequest> _parser = new pb::MessageParser<KeepAliveRequest>(() => new KeepAliveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeepAliveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.KeepAliveReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveRequest(KeepAliveRequest other) : this() {
      presenceStatus_ = other.presenceStatus_;
      appActiveStatus_ = other.appActiveStatus_;
      pushServiceToken_ = other.pushServiceToken_ != null ? other.pushServiceToken_.Clone() : null;
      pushServiceTokenList_ = other.pushServiceTokenList_.Clone();
      keepaliveIntervalSec_ = other.keepaliveIntervalSec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveRequest Clone() {
      return new KeepAliveRequest(this);
    }

    /// <summary>Field number for the "presenceStatus" field.</summary>
    public const int PresenceStatusFieldNumber = 1;
    private global::AcFunDanmu.RegisterRequest.Types.PresenceStatus presenceStatus_ = global::AcFunDanmu.RegisterRequest.Types.PresenceStatus.KPresenceOffline;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.RegisterRequest.Types.PresenceStatus PresenceStatus {
      get { return presenceStatus_; }
      set {
        presenceStatus_ = value;
      }
    }

    /// <summary>Field number for the "appActiveStatus" field.</summary>
    public const int AppActiveStatusFieldNumber = 2;
    private global::AcFunDanmu.RegisterRequest.Types.ActiveStatus appActiveStatus_ = global::AcFunDanmu.RegisterRequest.Types.ActiveStatus.KInvalid;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.RegisterRequest.Types.ActiveStatus AppActiveStatus {
      get { return appActiveStatus_; }
      set {
        appActiveStatus_ = value;
      }
    }

    /// <summary>Field number for the "pushServiceToken" field.</summary>
    public const int PushServiceTokenFieldNumber = 3;
    private global::AcFunDanmu.PushServiceToken pushServiceToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.PushServiceToken PushServiceToken {
      get { return pushServiceToken_; }
      set {
        pushServiceToken_ = value;
      }
    }

    /// <summary>Field number for the "pushServiceTokenList" field.</summary>
    public const int PushServiceTokenListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::AcFunDanmu.PushServiceToken> _repeated_pushServiceTokenList_codec
        = pb::FieldCodec.ForMessage(34, global::AcFunDanmu.PushServiceToken.Parser);
    private readonly pbc::RepeatedField<global::AcFunDanmu.PushServiceToken> pushServiceTokenList_ = new pbc::RepeatedField<global::AcFunDanmu.PushServiceToken>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AcFunDanmu.PushServiceToken> PushServiceTokenList {
      get { return pushServiceTokenList_; }
    }

    /// <summary>Field number for the "keepaliveIntervalSec" field.</summary>
    public const int KeepaliveIntervalSecFieldNumber = 5;
    private int keepaliveIntervalSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeepaliveIntervalSec {
      get { return keepaliveIntervalSec_; }
      set {
        keepaliveIntervalSec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeepAliveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeepAliveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PresenceStatus != other.PresenceStatus) return false;
      if (AppActiveStatus != other.AppActiveStatus) return false;
      if (!object.Equals(PushServiceToken, other.PushServiceToken)) return false;
      if(!pushServiceTokenList_.Equals(other.pushServiceTokenList_)) return false;
      if (KeepaliveIntervalSec != other.KeepaliveIntervalSec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PresenceStatus != global::AcFunDanmu.RegisterRequest.Types.PresenceStatus.KPresenceOffline) hash ^= PresenceStatus.GetHashCode();
      if (AppActiveStatus != global::AcFunDanmu.RegisterRequest.Types.ActiveStatus.KInvalid) hash ^= AppActiveStatus.GetHashCode();
      if (pushServiceToken_ != null) hash ^= PushServiceToken.GetHashCode();
      hash ^= pushServiceTokenList_.GetHashCode();
      if (KeepaliveIntervalSec != 0) hash ^= KeepaliveIntervalSec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PresenceStatus != global::AcFunDanmu.RegisterRequest.Types.PresenceStatus.KPresenceOffline) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PresenceStatus);
      }
      if (AppActiveStatus != global::AcFunDanmu.RegisterRequest.Types.ActiveStatus.KInvalid) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AppActiveStatus);
      }
      if (pushServiceToken_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PushServiceToken);
      }
      pushServiceTokenList_.WriteTo(output, _repeated_pushServiceTokenList_codec);
      if (KeepaliveIntervalSec != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(KeepaliveIntervalSec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PresenceStatus != global::AcFunDanmu.RegisterRequest.Types.PresenceStatus.KPresenceOffline) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PresenceStatus);
      }
      if (AppActiveStatus != global::AcFunDanmu.RegisterRequest.Types.ActiveStatus.KInvalid) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AppActiveStatus);
      }
      if (pushServiceToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PushServiceToken);
      }
      size += pushServiceTokenList_.CalculateSize(_repeated_pushServiceTokenList_codec);
      if (KeepaliveIntervalSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeepaliveIntervalSec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeepAliveRequest other) {
      if (other == null) {
        return;
      }
      if (other.PresenceStatus != global::AcFunDanmu.RegisterRequest.Types.PresenceStatus.KPresenceOffline) {
        PresenceStatus = other.PresenceStatus;
      }
      if (other.AppActiveStatus != global::AcFunDanmu.RegisterRequest.Types.ActiveStatus.KInvalid) {
        AppActiveStatus = other.AppActiveStatus;
      }
      if (other.pushServiceToken_ != null) {
        if (pushServiceToken_ == null) {
          PushServiceToken = new global::AcFunDanmu.PushServiceToken();
        }
        PushServiceToken.MergeFrom(other.PushServiceToken);
      }
      pushServiceTokenList_.Add(other.pushServiceTokenList_);
      if (other.KeepaliveIntervalSec != 0) {
        KeepaliveIntervalSec = other.KeepaliveIntervalSec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PresenceStatus = (global::AcFunDanmu.RegisterRequest.Types.PresenceStatus) input.ReadEnum();
            break;
          }
          case 16: {
            AppActiveStatus = (global::AcFunDanmu.RegisterRequest.Types.ActiveStatus) input.ReadEnum();
            break;
          }
          case 26: {
            if (pushServiceToken_ == null) {
              PushServiceToken = new global::AcFunDanmu.PushServiceToken();
            }
            input.ReadMessage(PushServiceToken);
            break;
          }
          case 34: {
            pushServiceTokenList_.AddEntriesFrom(input, _repeated_pushServiceTokenList_codec);
            break;
          }
          case 40: {
            KeepaliveIntervalSec = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeepAliveResponse : pb::IMessage<KeepAliveResponse> {
    private static readonly pb::MessageParser<KeepAliveResponse> _parser = new pb::MessageParser<KeepAliveResponse>(() => new KeepAliveResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeepAliveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.KeepAliveReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveResponse(KeepAliveResponse other) : this() {
      accessPointsConfig_ = other.accessPointsConfig_ != null ? other.accessPointsConfig_.Clone() : null;
      serverMsec_ = other.serverMsec_;
      accessPointsConfigIpv6_ = other.accessPointsConfigIpv6_ != null ? other.accessPointsConfigIpv6_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveResponse Clone() {
      return new KeepAliveResponse(this);
    }

    /// <summary>Field number for the "accessPointsConfig" field.</summary>
    public const int AccessPointsConfigFieldNumber = 1;
    private global::AcFunDanmu.AccessPointsConfig accessPointsConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.AccessPointsConfig AccessPointsConfig {
      get { return accessPointsConfig_; }
      set {
        accessPointsConfig_ = value;
      }
    }

    /// <summary>Field number for the "serverMsec" field.</summary>
    public const int ServerMsecFieldNumber = 2;
    private long serverMsec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerMsec {
      get { return serverMsec_; }
      set {
        serverMsec_ = value;
      }
    }

    /// <summary>Field number for the "accessPointsConfigIpv6" field.</summary>
    public const int AccessPointsConfigIpv6FieldNumber = 3;
    private global::AcFunDanmu.AccessPointsConfig accessPointsConfigIpv6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.AccessPointsConfig AccessPointsConfigIpv6 {
      get { return accessPointsConfigIpv6_; }
      set {
        accessPointsConfigIpv6_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeepAliveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeepAliveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AccessPointsConfig, other.AccessPointsConfig)) return false;
      if (ServerMsec != other.ServerMsec) return false;
      if (!object.Equals(AccessPointsConfigIpv6, other.AccessPointsConfigIpv6)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (accessPointsConfig_ != null) hash ^= AccessPointsConfig.GetHashCode();
      if (ServerMsec != 0L) hash ^= ServerMsec.GetHashCode();
      if (accessPointsConfigIpv6_ != null) hash ^= AccessPointsConfigIpv6.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (accessPointsConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AccessPointsConfig);
      }
      if (ServerMsec != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ServerMsec);
      }
      if (accessPointsConfigIpv6_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AccessPointsConfigIpv6);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (accessPointsConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessPointsConfig);
      }
      if (ServerMsec != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerMsec);
      }
      if (accessPointsConfigIpv6_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessPointsConfigIpv6);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeepAliveResponse other) {
      if (other == null) {
        return;
      }
      if (other.accessPointsConfig_ != null) {
        if (accessPointsConfig_ == null) {
          AccessPointsConfig = new global::AcFunDanmu.AccessPointsConfig();
        }
        AccessPointsConfig.MergeFrom(other.AccessPointsConfig);
      }
      if (other.ServerMsec != 0L) {
        ServerMsec = other.ServerMsec;
      }
      if (other.accessPointsConfigIpv6_ != null) {
        if (accessPointsConfigIpv6_ == null) {
          AccessPointsConfigIpv6 = new global::AcFunDanmu.AccessPointsConfig();
        }
        AccessPointsConfigIpv6.MergeFrom(other.AccessPointsConfigIpv6);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (accessPointsConfig_ == null) {
              AccessPointsConfig = new global::AcFunDanmu.AccessPointsConfig();
            }
            input.ReadMessage(AccessPointsConfig);
            break;
          }
          case 16: {
            ServerMsec = input.ReadInt64();
            break;
          }
          case 26: {
            if (accessPointsConfigIpv6_ == null) {
              AccessPointsConfigIpv6 = new global::AcFunDanmu.AccessPointsConfig();
            }
            input.ReadMessage(AccessPointsConfigIpv6);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
