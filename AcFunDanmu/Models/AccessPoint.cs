// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AccessPoint.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from AccessPoint.proto</summary>
public static partial class AccessPointReflection {

  #region Descriptor
  /// <summary>File descriptor for AccessPoint.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static AccessPointReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFBY2Nlc3NQb2ludC5wcm90byKoAQoLQWNjZXNzUG9pbnQSLQoLYWRkcmVz",
          "c1R5cGUYASABKA4yGC5BY2Nlc3NQb2ludC5BZGRyZXNzVHlwZRIMCgRwcm90",
          "GAIgASgNEgwKBGlwVjQYAyABKAcSDAoEaXBWNhgEIAEoDBIOCgZkb21haW4Y",
          "BSABKAkiMAoLQWRkcmVzc1R5cGUSCQoFa0lQVjQQABIJCgVrSVBWNhABEgsK",
          "B2tEb21haW4QAmIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::AccessPoint), global::AccessPoint.Parser, new[]{ "AddressType", "Prot", "IpV4", "IpV6", "Domain" }, null, new[]{ typeof(global::AccessPoint.Types.AddressType) }, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class AccessPoint : pb::IMessage<AccessPoint> {
  private static readonly pb::MessageParser<AccessPoint> _parser = new pb::MessageParser<AccessPoint>(() => new AccessPoint());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AccessPoint> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AccessPointReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccessPoint() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccessPoint(AccessPoint other) : this() {
    addressType_ = other.addressType_;
    prot_ = other.prot_;
    ipV4_ = other.ipV4_;
    ipV6_ = other.ipV6_;
    domain_ = other.domain_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccessPoint Clone() {
    return new AccessPoint(this);
  }

  /// <summary>Field number for the "addressType" field.</summary>
  public const int AddressTypeFieldNumber = 1;
  private global::AccessPoint.Types.AddressType addressType_ = global::AccessPoint.Types.AddressType.KIpv4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AccessPoint.Types.AddressType AddressType {
    get { return addressType_; }
    set {
      addressType_ = value;
    }
  }

  /// <summary>Field number for the "prot" field.</summary>
  public const int ProtFieldNumber = 2;
  private uint prot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Prot {
    get { return prot_; }
    set {
      prot_ = value;
    }
  }

  /// <summary>Field number for the "ipV4" field.</summary>
  public const int IpV4FieldNumber = 3;
  private uint ipV4_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint IpV4 {
    get { return ipV4_; }
    set {
      ipV4_ = value;
    }
  }

  /// <summary>Field number for the "ipV6" field.</summary>
  public const int IpV6FieldNumber = 4;
  private pb::ByteString ipV6_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString IpV6 {
    get { return ipV6_; }
    set {
      ipV6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "domain" field.</summary>
  public const int DomainFieldNumber = 5;
  private string domain_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Domain {
    get { return domain_; }
    set {
      domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AccessPoint);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AccessPoint other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AddressType != other.AddressType) return false;
    if (Prot != other.Prot) return false;
    if (IpV4 != other.IpV4) return false;
    if (IpV6 != other.IpV6) return false;
    if (Domain != other.Domain) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AddressType != global::AccessPoint.Types.AddressType.KIpv4) hash ^= AddressType.GetHashCode();
    if (Prot != 0) hash ^= Prot.GetHashCode();
    if (IpV4 != 0) hash ^= IpV4.GetHashCode();
    if (IpV6.Length != 0) hash ^= IpV6.GetHashCode();
    if (Domain.Length != 0) hash ^= Domain.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AddressType != global::AccessPoint.Types.AddressType.KIpv4) {
      output.WriteRawTag(8);
      output.WriteEnum((int) AddressType);
    }
    if (Prot != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Prot);
    }
    if (IpV4 != 0) {
      output.WriteRawTag(29);
      output.WriteFixed32(IpV4);
    }
    if (IpV6.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(IpV6);
    }
    if (Domain.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Domain);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AddressType != global::AccessPoint.Types.AddressType.KIpv4) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AddressType);
    }
    if (Prot != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Prot);
    }
    if (IpV4 != 0) {
      size += 1 + 4;
    }
    if (IpV6.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpV6);
    }
    if (Domain.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AccessPoint other) {
    if (other == null) {
      return;
    }
    if (other.AddressType != global::AccessPoint.Types.AddressType.KIpv4) {
      AddressType = other.AddressType;
    }
    if (other.Prot != 0) {
      Prot = other.Prot;
    }
    if (other.IpV4 != 0) {
      IpV4 = other.IpV4;
    }
    if (other.IpV6.Length != 0) {
      IpV6 = other.IpV6;
    }
    if (other.Domain.Length != 0) {
      Domain = other.Domain;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AddressType = (global::AccessPoint.Types.AddressType) input.ReadEnum();
          break;
        }
        case 16: {
          Prot = input.ReadUInt32();
          break;
        }
        case 29: {
          IpV4 = input.ReadFixed32();
          break;
        }
        case 34: {
          IpV6 = input.ReadBytes();
          break;
        }
        case 42: {
          Domain = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the AccessPoint message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum AddressType {
      [pbr::OriginalName("kIPV4")] KIpv4 = 0,
      [pbr::OriginalName("kIPV6")] KIpv6 = 1,
      [pbr::OriginalName("kDomain")] KDomain = 2,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
